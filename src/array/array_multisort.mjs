import multisort from './multisort.mjs';

/**
 * Сортирует несколько массивов или многомерные массивы
 *
 * Функцией `array_multisort()` пользуются для одновременной сортировки нескольких массивов
 * или одного многомерного массива по одному или несколькими уровням вложенности.
 *
 * Ассоциативные строковые `(string)` ключи будут сохранены, но числовые ключи будут переиндексированы.
 *
 * @param {Array|Object} array1 Сортируемый массив `(array)`.
 * @param {any} array1_sort_order
 *
 * Порядок сортировки предыдущего аргумента массива `(array)`. Указывают константу `SORT_ASC`
 * для сортировки по возрастанию или константу `SORT_DESC` для сортировки по убыванию.
 *
 * Этот аргумент разрешено менять местами с аргументом `array1_sort_flags` или не указывать,
 * тогда функция возьмёт за основу значение `SORT_ASC`.
 *
 * @param {any} array1_sort_flags
 *
 * Настройки сортировки для предыдущего аргумента массива `(array)`:
 *
 * Флаг способа сортировки:
 *
 * - `SORT_REGULAR` — обычное сравнение элементов (без изменения типов)
 * - `SORT_NUMERIC` — числовое сравнение элементов
 * - `SORT_STRING` — строковое сравнение элементов
 * - `SORT_NATURAL` — строковое сравнение элементов через алгоритм естественной сортировки (natural order), как в функции `natsort()`
 * - `SORT_FLAG_CASE` — разрешено объединять через бинарное ИЛИ с константой `SORT_STRING` или `SORT_NATURAL` для сортировки строк без учёта регистра
 *
 * Этот аргумент разрешено менять местами с аргументом `array1_sort_order` или не указывать, тогда функция возьмёт за основу значение `SORT_REGULAR`.
 *
 * @returns {true}
 * @throws {TypePHPJSError|ValuePHPJSError}
 */
export default function array_multisort(array1, array1_sort_order, array1_sort_flags, ...rest) {
    return multisort(array1, array1_sort_order, array1_sort_flags, ...rest);
}
