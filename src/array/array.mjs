import { is_array } from '../variables.mjs';

/**
 * Преобразует переданные значения в массивы или объекты.
 *
 * Если передано одно значение:
 * - Если это массив или ассоциативный массив (объект с парами "ключ-значение"), возвращается это значение.
 *
 * Если передано несколько значений:
 * - Возвращается массив, где каждый элемент обработан в зависимости от типа данных.
 * - Обычные массивы остаются без изменений.
 * - Ассоциативные массивы (объекты с парами "ключ-значение") преобразуются в объекты без прототипа.
 *
 * Входные данные могут быть:
 * - Обычным массивом (например, `[1, 2, 3]`)
 * - Ассоциативным массивом (например, `{ foo: 'bar', baz: 42 }`)
 * - Примитивными значениями (например, `42`, `'string'`, `null`, `undefined`)
 *
 * @param {...any} values Произвольное количество входных значений.
 * @returns {Array|Object} Возвращает массив или объект, в зависимости от количества и типов входных значений.
 *
 * ```js
 * // Один обычный массив
 * array([1, 2, 3]); // [1, 2, 3]
 * ```
 *
 * ```js
 * // Один ассоциативный массив
 * array({ foo: 'bar' }); // { foo: 'bar' } (объект без прототипа)
 * ```
 *
 * ```js
 * // Несколько значений
 * array(42, [1, 2], { foo: 'bar' });
 * // [42, [1, 2], { foo: 'bar' }]
 * ```
 *
 * ```js
 * // Примитивные значения
 * array('hello', null, 3.14); // ['hello', null, 3.14]
 * ```
 *
 * ```js
 * // Пустой вызов
 * array(); // []
 * ```
 */
export default function array(...values) {
    const result = []; // Результирующий массив

    for (const value of values) {
        let v = value; // Переменная для обработки текущего значения

        // Проверяем, является ли значение ассоциативным массивом (объектом с ключами)
        if (is_array(value) && !Array.isArray(value) && Object.getPrototypeOf(value) !== null) {
            // Преобразуем объект в объект без прототипа
            v = Object.assign(Object.create(null), value);
        }

        // Добавляем обработанное или исходное значение в результирующий массив
        result.push(v);
    }

    // Если передано одно значение, возвращаем его напрямую, если оно массив или объект
    return result.length === 1 && is_array(result[0]) ? result[0] : result;
}
