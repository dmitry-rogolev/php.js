import { array } from '../array.mjs';
import is_array from './is_array.mjs';
import is_null from './is_null.mjs';
import is_undefined from './is_undefined.mjs';

/**
 * Приводит значение переменной к массиву.
 *
 * ### Описание
 *
 * Функция `to_array` используется для преобразования различных типов данных в массив. Если значение
 * уже является массивом (тип `Array` или ассоциативный массив), возвращается оно же. Объекты
 * (экземпляры классов) преобразуются в массив с одним элементом.
 *
 * #### Примечание
 *
 * Функция `to_array` для объектов (ассоциативных массивов) возвращает результат
 * работы функции `array`, которая создает объект-контейнер пар ключ-значение
 * (ассоциативный массив) с помощью конструкции `Object.create(null)`,
 * копирует все видимые пары в этот контейнер, а также добавляет итератор
 * `Symbol.iterator` для перебора контейнера в цикле `for-of`.
 *
 * ### Параметры
 *
 * - `value` (any)
 *      Переменная, значение которой необходимо привести к массиву.
 *
 * ### Возвращаемое значение
 *
 * Возвращает массив, содержащий переданное значение. Если значение уже является массивом, возвращается оно же.
 *
 * ### Примеры использования
 *
 * 1. Преобразование строки в массив:
 *
 *    ```js
 *    const result = to_array('example');
 *    // Результат: ["example"]
 *    ```
 *
 * 2. Преобразование числа в массив:
 *
 *    ```js
 *    const result = to_array(123);
 *    // Результат: [123]
 *    ```
 *
 * 3. Преобразование массива (без изменений):
 *
 *    ```js
 *    const result = to_array([1, 2, 3]);
 *    // Результат: [1, 2, 3]
 *    ```
 *
 * 4. Преобразование объекта в массив:
 *
 * Функция `to_array` для объектов (ассоциативных массивов) возвращает
 * результат работы функции `array`, которая создает объект-контейнер
 * пар ключ-значение (ассоциативный массив) с помощью конструкции
 * `Object.create(null)`, копирует все видимые пары в этот контейнер,
 * а также добавляет итератор `Symbol.iterator` для перебора контейнера
 * в цикле `for-of`.
 *
 *    ```js
 *    const result = to_array({ key: 'value' });
 *    // Результат: { key: "value" }
 *
 *    const proto = Object.getPrototypeOf(result);
 *    // Результат: null
 *
 *    for (const [key, value] of result) {
 *        console.log(key, value);
 *    }
 *    // Результат: 'key', 'value'
 *    ```
 *
 * 5. Преобразование экземпляра класса в массив:
 *
 *    ```js
 *    class MyClass {}
 *
 *    const instance = new MyClass();
 *    const result = to_array(instance);
 *    // Результат: [instance]
 *    ```
 *
 * 6. Преобразование null:
 *
 *    ```js
 *    const result = to_array(null);
 *    // Результат: []
 *    ```
 *
 * 7. Преобразование undefined:
 *
 *    ```js
 *    const result = to_array(undefined);
 *    // Результат: []
 *    ```
 *
 * @param {any} value Переменная, значение которой необходимо привести к массиву.
 * @returns {Array|Object} Возвращает приведенное к массиву значение переменной `value`.
 */
export default function to_array(value) {
    if (is_null(value) || is_undefined(value)) {
        return [];
    }

    if (Array.isArray(value)) {
        return value;
    }

    if (is_array(value)) {
        return array(value);
    }

    return [value];
}
