/**
 * Проверяет, что значение может быть вызвано как функция.
 *
 * ### Параметры
 *
 * - `value` (any): Проверяемое значение. Может быть любым типом данных.
 *
 * ### Описание
 *
 * Функция проверяет, является ли переданное значение функцией, исключая классы.
 * В JavaScript функции и классы оба являются типом `function`, но классы имеют особый синтаксис и поведение.
 * Функция `is_callable` различает их, проверяя, не начинается ли строковое представление функции с `class`, что указывает на то, что это класс, а не обычная функция.
 * Если значение является функцией (но не классом), функция возвращает `true`.
 * Для всех остальных типов данных (включая классы, объекты, примитивы) функция возвращает `false`.
 *
 * ### Возвращаемое значение
 *
 * Возвращает `true`, если переданное значение может быть вызвано как функция (это обычная функция).
 * Возвращает `false`, если переданное значение является классом или любым другим типом данных.
 *
 * ### Примеры использования
 *
 * Пример 1: обычная функция
 *
 * ```js
 * function test() {}
 * is_callable(test); // Возвращает: true
 * ```
 *
 * Пример 2: класс
 *
 * ```js
 * class MyClass {}
 * is_callable(MyClass); // Возвращает: false
 * ```
 *
 * Пример 3: объект
 *
 * ```js
 * const obj = {};
 * is_callable(obj); // Возвращает: false
 * ```
 *
 * Пример 4: примитив
 *
 * ```js
 * is_callable(42); // Возвращает: false
 * is_callable('hello'); // Возвращает: false
 * ```
 *
 * @param {any} value - Проверяемое значение.
 * @returns {boolean}
 */
export default function is_callable(value) {
    return typeof value === 'function' && !value.toString().startsWith('class ');
}
