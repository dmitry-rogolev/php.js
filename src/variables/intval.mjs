import boolval from './to_bool.mjs';
import is_float from './is_float.mjs';
import is_int from './is_int.mjs';
import is_string from './is_string.mjs';

/**
 * Возвращает целочисленное значение переменной
 *
 * Возвращает целочисленное значение (`int`) переменной `value`,
 * рассматривая ее как значение в системе счисления с основанием,
 * которое определено в параметре `base` (по умолчанию основание равно 10).
 *
 * @param {any} value Скалярное значение для конвертации в целое
 * @param {Number} base
 *
 * Основание системы счисления для преобразования
 *
 * Целое число в диапазоне между 2 и 36, представляющее собой
 * основание системы счисления числовой строки `value`,
 * описанной выше. В основном пользователи используют
 * десятичную систему счисления и указывают 10.
 * **Всегда указывайте этот параметр**, чтобы исключить
 * ошибки считывания и гарантировать корректность исполнения
 * и предсказуемость результата. Когда основание системы
 * счисления не указано, разные реализации могут возвращать
 * разные результаты.
 *
 * Если основание системы счисления имеет значение `undefined`
 * (не определено или равно `0` (или не указано),
 * то JavaScript по умолчанию предполагает следующее:
 *
 * -   Если значение входного параметра `value` начинается
 * с "0x" или "0X", за основание системы счисления принимается 16,
 * и интерпретации подвергается оставшаяся часть строки.
 *
 * -   Если значение входного параметра `value` начинается с "0",
 * за основание системы счисления принимается либо 8, либо 10,
 * в зависимости от конкретной реализации.
 * В спецификации ECMAScript 5 прописано использование
 * 10 (десятичная система), но это поддерживается ещё
 * не всеми браузерами, поэтому необходимо всегда указывать
 * основание системы счисления при использовании функции `intval`.
 *
 * -   Если значение входного параметра `value` начинается
 * с любого другого символа, система счисления считается
 * десятичной (основание 10).
 *
 * @returns {number}
 *
 * Функция возвращает целочисленное значение переменной `value`
 * в случае успешного выполнения, или `0` в случае
 * возникновения ошибки. Для пустых массивов возвращается `0`,
 * для непустых возвращается `1`.
 */
export default function intval(value, base = 10) {
    if (!is_int(value) && !is_float(value) && !is_string(value)) {
        return Number(boolval(value));
    }

    const result = parseInt(value, base);

    return Number.isNaN(result) ? 0 : result;
}
