/**
 * Проверяет, является ли переданное значение объектом, созданным с использованием класса.
 *
 * ### Параметры
 *
 * - `value` (any): Проверяемая переменная.
 *
 * ### Описание
 *
 * В JavaScript объекты могут быть созданы как с использованием классов, так и с помощью функций-конструкторов
 * или простых объектов. Для определения, является ли значение объектом, созданным с использованием класса,
 * функция выполняет несколько проверок:
 *
 * 1. Проверка, что значение является объектом (с использованием `instanceof Object`).
 * 2. Проверка, что у объекта есть конструктор, и что его строковое представление начинается с 'class',
 *    что характерно для объектов, созданных с использованием классов.
 *
 * Это позволяет корректно отличить обычные объекты, массивы, примитивы и классовые объекты.
 *
 * #### Примечание
 *
 * - Если объект был создан с помощью `class`, то его конструктор будет иметь строковое представление, начинающееся с "class".
 * - Массивы и обычные объекты, созданные с использованием `Object` или функции-конструктора, будут исключены.
 *
 * ### Возвращаемое значение
 *
 * Возвращает `true`, если значение является объектом, созданным с использованием класса, иначе возвращает `false`.
 *
 * ### Примеры использования
 *
 * 1. Обычные объекты:
 *
 * ```js
 * is_object({}); // false - это обычный объект, не созданный с помощью класса
 * ```
 *
 * 2. Массивы:
 *
 * ```js
 * is_object([]); // false - это массив, а не объект, созданный с использованием класса
 * ```
 *
 * 3. Объект, созданный с использованием `Date`:
 *
 * ```js
 * is_object(new Date()); // false - объект Date, не являющийся классом, а встроенным объектом
 * ```
 *
 * 4. Классы:
 *
 * ```js
 * class MyClass {}
 * is_object(new MyClass()); // true - это объект, созданный с использованием класса
 * ```
 *
 * 5. Примитивы и другие объекты:
 *
 * ```js
 * is_object(null); // false - это не объект
 * is_object(42); // false - это не объект
 * is_object(new Map()); // false - объект Map, но не класс
 * ```
 *
 * @param {any} value Проверяемая переменная.
 * @returns {boolean}
 */
export default function is_object(value) {
    // Обертка в Boolean необходима, т.к. при переопределении конструктора, будет возвращено его значение.
    // Пример:
    // class MyClass {}
    // const myClassInstance = new MyClass();
    // MyClass.prototype.constructor = undefined;
    // is_object(myClassInstance); // undefined
    return Boolean(
        // Проверяем, что значение является экземпляром объекта (не null, не примитив)
        value instanceof Object &&
            // Проверяем, что у прототипа есть свойство constructor
            Object.getPrototypeOf(value).constructor &&
            // Проверяем, что свойство constructor у прототипа начинается с 'class',
            // что подтверждает, что это класс
            Object.getPrototypeOf(value).constructor.toString().startsWith('class '),
    );
}
