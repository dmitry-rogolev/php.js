/**
 * Функция `is_array` проверяет, является ли переданная переменная массивом
 * или ассоциативным массивом (объектом с ключами и значениями).
 *
 * В JavaScript массивы и объекты имеют разные структуры и предназначения:
 * - Массивы (Array) являются упорядоченными коллекциями элементов, которые могут быть индексированы.
 * - Объекты (Object) содержат пары "ключ-значение", которые могут быть неупорядоченными.
 *
 * Эта функция проверяет, соответствует ли переменная либо стандартному массиву (например, `[1, 2, 3]`),
 * либо ассоциативному массиву (объекту с парами "ключ-значение", например, `{foo: 'bar'}`).
 *
 * Алгоритм работы функции:
 * 1. Сначала проверяется, является ли переданное значение обычным массивом с помощью встроенного метода `Array.isArray(value)`.
 *    Если это массив, функция сразу возвращает `true`.
 *
 * 2. Если переменная не является массивом, то выполняются дополнительные проверки:
 *    - Проверяется, что значение не равно `null` (так как `null` в JavaScript также является объектом, но не является ни массивом, ни объектом с парами "ключ-значение").
 *    - Проверяется, что значение является объектом (с помощью `typeof value === 'object'`).
 *    - Проверяется, что прототип объекта совпадает с `Object.prototype` или является `null` (это означает, что объект был создан с помощью `Object.create(null)` и не имеет прототипа).
 *    - Исключаются массивоподобные объекты (например, `arguments`, `NodeList`), путем проверки, что свойство `length` не является собственным свойством объекта.
 *    - Дополнительно проверяется, что объект является простым (его конструктор равен `Object`), чтобы исключить встроенные объекты, такие как `Math`, `Date` и другие.
 *
 * Возвращаемое значение:
 * - Функция возвращает `true`, если переменная является:
 *   - Обычным массивом, например:
 *     ```javascript
 *     is_array([1, 2, 3]); // true
 *     ```
 *   - Ассоциативным массивом (объектом с парами "ключ-значение"), например:
 *     ```javascript
 *     is_array({ foo: 'bar', baz: 42 }); // true
 *     ```
 *   - Объектом, созданным с помощью `Object.create(null)`:
 *     ```javascript
 *     const noProtoObject = Object.create(null);
 *     noProtoObject.foo = 'bar';
 *     is_array(noProtoObject); // true
 *     ```
 * - Функция возвращает `false` для:
 *   - Примитивных значений (например, `null`, `undefined`, `42`, `'hello'`):
 *     ```javascript
 *     is_array(null);         // false
 *     is_array(undefined);    // false
 *     is_array(42);           // false
 *     is_array('hello');      // false
 *     ```
 *   - Специальных объектов, таких как `Map`, `Set`, `Function`, `Date`, `Math` и других встроенных объектов:
 *     ```javascript
 *     is_array(new Map());    // false
 *     is_array(new Set());    // false
 *     is_array(() => {});     // false
 *     is_array(Math);         // false
 *     ```
 *   - Экземпляров классов и пользовательских объектов:
 *     ```javascript
 *     class MyClass {}
 *     const instance = new MyClass();
 *     is_array(instance); // false
 *     ```
 *
 * Важно:
 * - Функция не обрабатывает массивоподобные объекты (например, `arguments`, `NodeList`), так как они могут иметь свойство `length`, но не являются настоящими массивами.
 * - Функция исключает встроенные объекты JavaScript (например, `Math`, `Date`, `JSON`, `Function`), так как они не должны считаться ассоциативными массивами.
 *
 * Примеры использования:
 *
 * 1. Простые массивы:
 *    ```javascript
 *    is_array([1, 2, 3]); // true
 *    is_array([]); // true
 *    ```
 *
 * 2. Ассоциативные массивы (объекты с ключами и значениями):
 *    ```javascript
 *    is_array({ foo: 'bar', baz: 42 }); // true
 *    is_array({ '0': 'a', '1': 'b' }); // true
 *    ```
 *
 * 3. Объекты, созданные без прототипа:
 *    ```javascript
 *    const noProtoObject = Object.create(null);
 *    noProtoObject.foo = 'bar';
 *    is_array(noProtoObject); // true
 *    ```
 *
 * 4. Примитивы и невалидные значения:
 *    ```javascript
 *    is_array(null);         // false
 *    is_array(undefined);    // false
 *    is_array(42);           // false
 *    is_array('hello');      // false
 *    ```
 *
 * 5. Специальные объекты:
 *    ```javascript
 *    is_array(new Map());    // false
 *    is_array(new Set());    // false
 *    is_array(() => {});     // false
 *    ```
 *
 * 6. Классы и их экземпляры:
 *    ```javascript
 *    class MyClass {}
 *    const instance = new MyClass();
 *    is_array(instance); // false
 *    ```
 *
 * Ограничения:
 * - Функция проверяет только ассоциативные массивы, унаследованные от `Object.prototype`
 *   или созданные через `Object.create(null)`.
 * - Исключает массивоподобные объекты, такие как `arguments`, `NodeList`, а также экземпляры встроенных объектов.
 *
 * @param {any} value Проверяемая переменная.
 * @returns {boolean} Возвращает `true`, если переменная является массивом или ассоциативным массивом, иначе `false`.
 */
export default function is_array(value) {
    return (
        // Проверка, является ли значение массивом с помощью стандартного метода Array.isArray
        Array.isArray(value) ||
        // Проверка, что значение - объект (не null)
        (value &&
            typeof value === 'object' &&
            // Проверка, что прототип объекта равен null (для объектов, созданных с Object.create(null))
            (Object.getPrototypeOf(value) === null ||
                // Исключение встроенных объектов, для которых функция возвращает true.
                (![Math, JSON, Reflect, Intl].includes(value) &&
                    // Проверка, что объект унаследован от Object.prototype (для обычных объектов)
                    Object.getPrototypeOf(value) === Object.prototype &&
                    // Проверка, что объект является простым объектом, созданным с помощью конструктора Object
                    value.constructor === Object &&
                    // Проверка, что свойство length не является собственным свойством объекта
                    !Object.hasOwn(value, 'length'))))
    );
}
