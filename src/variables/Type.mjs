import is_array from './is_array.mjs';
import is_bool from './is_bool.mjs';
import is_callable from './is_callable.mjs';
import is_class from './is_class.mjs';
import is_contract from './is_contract.mjs';
import is_countable from './is_countable.mjs';
import is_float from './is_float.mjs';
import is_int from './is_int.mjs';
import is_iterable from './is_iterable.mjs';
import is_null from './is_null.mjs';
import is_number from './is_number.mjs';
import is_numeric from './is_numeric.mjs';
import is_object from './is_object.mjs';
import is_scalar from './is_scalar.mjs';
import is_string from './is_string.mjs';
import is_symbol from './is_symbol.mjs';
import is_undefined from './is_undefined.mjs';

/**
 * Класс `Type` предоставляет статические методы для проверки типов данных.
 *
 * ### Описание
 *
 * Класс `Type` содержит набор статических методов, которые позволяют проверять типы данных в JavaScript.
 * Эти методы могут быть использованы для проверки, является ли значение массивом, логическим значением,
 * функцией, классом, контрактом, числом с плавающей точкой, целым числом, итерируемым объектом, объектом,
 * скалярным значением, строкой, символом или `undefined`.
 *
 * ### Методы
 *
 * - `isArray(value: any): boolean` - Проверяет, является ли значение массивом или ассоциативным массивом.
 * - `isBool(value: any): boolean` - Проверяет, является ли значение логическим (`boolean`).
 * - `isBoolean(value: any): boolean` - Проверяет, является ли значение логическим (`boolean`).
 * - `isCallable(value: any): boolean` - Проверяет, может ли значение быть вызвано как функция.
 * - `isClass(value: any): boolean` - Проверяет, является ли значение классом.
 * - `isContract(value: any): boolean` - Проверяет, является ли значение контрактом, основанным на классе `Interface`.
 * - `isCountable(value: any): boolean` - Проверяет, является ли значение счётным.
 * - `isDouble(value: any): boolean` - Проверяет, является ли значение числом с плавающей точкой.
 * - `isFloat(value: any): boolean` - Проверяет, является ли значение числом с плавающей точкой.
 * - `isInt(value: any): boolean` - Проверяет, является ли значение целым числом.
 * - `isInteger(value: any): boolean` - Проверяет, является ли значение целым числом.
 * - `isIterable(value: any): boolean` - Проверяет, является ли значение итерируемым.
 * - `isLong(value: any): boolean` - Проверяет, является ли значение целым числом.
 * - `isNull(value: any): boolean` - Проверяет, является ли значение `null`.
 * - `isNumber(value: any): boolean` - Проверяет, является ли значение числом.
 * - `isNumeric(value: any): boolean` - Проверяет, является ли значение числом или числовой строкой.
 * - `isObject(value: any): boolean` - Проверяет, является ли значение объектом, созданным с использованием класса.
 * - `isScalar(value: any): boolean` - Проверяет, является ли значение скалярным.
 * - `isString(value: any): boolean` - Проверяет, является ли значение строкой.
 * - `isSymbol(value: any): boolean` - Проверяет, является ли значение символом.
 * - `isUndefined(value: any): boolean` - Проверяет, является ли значение `undefined`.
 *
 * ### Примеры использования
 *
 * ```js
 * Type.isArray([1, 2, 3]); // true
 * Type.isBool(true); // true
 * Type.isCallable(() => {}); // true
 * Type.isClass(class {}); // true
 * Type.isContract(class extends Interface {}); // true
 * Type.isCountable([1, 2, 3]); // true
 * Type.isDouble(3.14); // true
 * Type.isFloat(3.14); // true
 * Type.isInt(42); // true
 * Type.isInteger(42); // true
 * Type.isIterable([]); // true
 * Type.isLong(42); // true
 * Type.isNull(null); // true
 * Type.isNumber(42); // true
 * Type.isNumeric('42'); // true
 * Type.isObject(new stdClass()); // true
 * Type.isScalar(42); // true
 * Type.isString('hello'); // true
 * Type.isSymbol(Symbol('symbol')); // true
 * Type.isUndefined(undefined); // true
 * ```
 */
class Type {
    /**
     * Проверяет, является ли переданное значение массивом или ассоциативным массивом (объектом с ключами и значениями).
     *
     * ### Описание
     *
     * В JavaScript массивы и объекты имеют разные структуры и предназначения:
     *
     * - Массивы (Array) являются упорядоченными коллекциями элементов, которые могут быть индексированы.
     * - Объекты (Object) содержат пары "ключ-значение", которые могут быть неупорядоченными.
     *
     * Эта функция проверяет, является ли переданное значение обычным массивом (например, `[1, 2, 3]`),
     * либо ассоциативным массивом (объектом с парами "ключ-значение", например, `{foo: 'bar'}`).
     *
     * ### Алгоритм работы функции
     *
     * 1. Сначала проверяется, является ли переданное значение обычным массивом с помощью встроенного метода `Array.isArray(value)`. Если это массив, функция сразу возвращает `true`.
     *
     * 2. Если переменная не является массивом, то выполняются дополнительные проверки:
     *
     *    - Проверяется, что значение не равно `null` (так как `null` в JavaScript также является объектом, но не является ни массивом, ни объектом с парами "ключ-значение").
     *    - Проверяется, что значение является объектом JavaScript (с помощью `typeof value === 'object'`).
     *    - Проверяется, что прототип объекта совпадает с `Object.prototype` (это объект, от которого наследуются все объекты в JavaScript) или является `null` (это означает, что объект был создан с помощью `Object.create(null)` и не имеет прототипа).
     *    - Исключаются массивоподобные объекты (например, `arguments`, `NodeList`), путем проверки, что свойство `length` не является собственным свойством объекта.
     *    - Дополнительно проверяется, что объект является простым (его конструктор равен `Object`), а также исключаются встроенные объекты (`Math`, `JSON`, `Reflect`, `Intl`), для которых функция возвращает `true`.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Проверяемая переменная.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если переменная является обычным массивом (`Array`), ассоциативным массивом (объектом с парами "ключ-значение"), ассоциативным массивом, созданным с помощью `Object.create(null)`. В остальных случаях функция возвращает `false`.
     *
     * ### Примеры использования
     *
     * 1. Простые массивы:
     *
     *    ```js
     *    Type.isArray([1, 2, 3]); // true
     *    Type.isArray([]); // true
     *    ```
     *
     * 2. Ассоциативные массивы (объекты с ключами и значениями):
     *
     *    ```js
     *    Type.isArray({ foo: 'bar', baz: 42 }); // true
     *    Type.isArray({ '0': 'a', '1': 'b' }); // true
     *    ```
     *
     * 3. Объекты, созданные без прототипа:
     *
     *    ```js
     *    const noProtoObject = Object.create(null);
     *    noProtoObject.foo = 'bar';
     *    Type.isArray(noProtoObject); // true
     *    ```
     *
     * 4. Примитивы и невалидные значения:
     *
     *    ```js
     *    Type.isArray(null);         // false
     *    Type.isArray(undefined);    // false
     *    Type.isArray(42);           // false
     *    Type.isArray('hello');      // false
     *    ```
     *
     * 5. Специальные объекты:
     *
     *    ```js
     *    Type.isArray(new Map());    // false
     *    Type.isArray(new Set());    // false
     *    Type.isArray(() => {});     // false
     *    ```
     *
     * 6. Классы и их экземпляры:
     *
     *    ```js
     *    class MyClass {}
     *    const instance = new MyClass();
     *    Type.isArray(instance); // false
     *    ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является массивом или ассоциативным массивом, иначе `false`.
     */
    static isArray(value) {
        return is_array(value);
    }

    /**
     * Проверяет, является ли переданное значение логическим типом (`boolean`).
     *
     * ### Описание
     *
     * В JavaScript логическое значение может быть только двумя состояниями: `true` или `false`.
     * Функция проверяет тип переданного значения с использованием оператора `typeof`.
     * Если значение является примитивом типа `boolean`, функция возвращает `true`.
     * Для всех других типов (включая объекты, строки, числа, `null`, `undefined` и другие) функция вернёт `false`.
     *
     * #### Примечание
     *
     * - Функция возвращает `false` для объектов типа `Boolean`, созданных с помощью конструктора `new Boolean()`.
     * - Возвращает `false` для массивов, объектов и других типов данных, отличных от `boolean`.
     *
     * ### Параметры
     *
     * - `value` (any):
     *      Проверяемая переменная.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение `value` является логическим (`boolean`), иначе `false`.
     *
     * ### Примеры использования
     *
     * ```js
     * Type.isBool(true);   // Возвращает: true
     * Type.isBool(false);  // Возвращает: true
     * Type.isBool(0);      // Возвращает: false
     * Type.isBool('true'); // Возвращает: false
     * Type.isBool(null);   // Возвращает: false
     * Type.isBool([]);     // Возвращает: false
     * Type.isBool({});     // Возвращает: false
     * Type.isBool(new Boolean(true)); // Возвращает: false
     * ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является логическим, иначе `false`.
     */
    static isBool(value) {
        return is_bool(value);
    }

    /**
     * Проверяет, является ли переданное значение логическим типом (`boolean`).
     *
     * ### Описание
     *
     * В JavaScript логическое значение может быть только двумя состояниями: `true` или `false`.
     * Функция проверяет тип переданного значения с использованием оператора `typeof`.
     * Если значение является примитивом типа `boolean`, функция возвращает `true`.
     * Для всех других типов (включая объекты, строки, числа, `null`, `undefined` и другие) функция вернёт `false`.
     *
     * #### Примечание
     *
     * - Функция возвращает `false` для объектов типа `Boolean`, созданных с помощью конструктора `new Boolean()`.
     * - Возвращает `false` для массивов, объектов и других типов данных, отличных от `boolean`.
     *
     * ### Параметры
     *
     * - `value` (any):
     *      Проверяемая переменная.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение `value` является логическим (`boolean`), иначе `false`.
     *
     * ### Примеры использования
     *
     * ```js
     * Type.isBoolean(true);   // Возвращает: true
     * Type.isBoolean(false);  // Возвращает: true
     * Type.isBoolean(0);      // Возвращает: false
     * Type.isBoolean('true'); // Возвращает: false
     * Type.isBoolean(null);   // Возвращает: false
     * Type.isBoolean([]);     // Возвращает: false
     * Type.isBoolean({});     // Возвращает: false
     * Type.isBoolean(new Boolean(true)); // Возвращает: false
     * ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является логическим, иначе `false`.
     */
    static isBoolean(value) {
        return is_bool(value);
    }

    /**
     * Проверяет, что значение может быть вызвано как функция.
     *
     * ### Параметры
     *
     * - `value` (any):
     *      Проверяемое значение. Может быть любым типом данных.
     *
     * ### Описание
     *
     * Функция проверяет, является ли переданное значение функцией, исключая классы.
     * В JavaScript функции и классы оба являются типом `function`, но классы имеют особый синтаксис и поведение.
     * Функция `isCallable` различает их, проверяя, не начинается ли строковое представление функции с `class`, что указывает на то, что это класс, а не обычная функция.
     * Если значение является функцией (но не классом), функция возвращает `true`.
     * Для всех остальных типов данных (включая классы, объекты, примитивы) функция возвращает `false`.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если переданное значение может быть вызвано как функция (это обычная функция).
     * Возвращает `false`, если переданное значение является классом или любым другим типом данных.
     *
     * ### Примеры использования
     *
     * Пример 1: обычная функция
     *
     * ```js
     * function test() {}
     * Type.isCallable(test); // Возвращает: true
     * ```
     *
     * Пример 2: класс
     *
     * ```js
     * class MyClass {}
     * Type.isCallable(MyClass); // Возвращает: false
     * ```
     *
     * Пример 3: объект
     *
     * ```js
     * const obj = {};
     * Type.isCallable(obj); // Возвращает: false
     * ```
     *
     * Пример 4: примитив
     *
     * ```js
     * Type.isCallable(42); // Возвращает: false
     * Type.isCallable('hello'); // Возвращает: false
     * ```
     *
     * @param {any} value - Проверяемое значение.
     * @returns {boolean} Возвращает `true`, если значение может быть вызвано как функция, иначе `false`.
     */
    static isCallable(value) {
        return is_callable(value);
    }

    /**
     * Проверяет, является ли переданная переменная классом.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Проверяемая переменная.
     *
     * ### Описание
     *
     * В JavaScript классы являются функциями, но с уникальным поведением.
     *
     * Для определения класса функция проверяет:
     *
     * 1. Что переданная переменная является функцией.
     * 2. Что строковое представление функции начинается с `class `.
     *
     * #### Примечание
     *
     * Конструкторы функций, созданные с помощью `function`, не будут распознаны как классы.
     *
     * Для примера:
     *
     * ```js
     * function Foo() {}
     * Type.isClass(Foo); // Возвращает: false
     * ```
     *
     * В отличие от классов, которые выглядят так:
     *
     * ```js
     * class MyClass {}
     * Type.isClass(MyClass); // Возвращает: true
     * ```
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение является классом, иначе `false`.
     *
     * ### Примеры использования
     *
     * 1. Классы:
     *
     * ```js
     * class MyClass {}
     * Type.isClass(MyClass); // true
     * ```
     *
     * 2. Функции-конструкторы:
     *
     * ```js
     * function MyFunction() {}
     * Type.isClass(MyFunction); // false
     * ```
     *
     * 3. Объекты и примитивы:
     *
     * ```js
     * Type.isClass({}); // false
     * Type.isClass([]); // false
     * Type.isClass(null); // false
     * Type.isClass(42); // false
     * ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является классом, иначе `false`.
     */
    static isClass(value) {
        return is_class(value);
    }

    /**
     * Проверяет, является ли переданный класс контрактом, основанным на классе `Interface`.
     *
     * ### Параметры
     *
     * - `value` {any} - Проверяемое значение.
     *
     * ### Описание
     *
     * Функция определяет, расширяет ли переданный класс - класс `Interface` или его наследников.
     * Она анализирует цепочку прототипов переданного класса, чтобы определить,
     * есть ли в ней `Interface`.
     *
     * Класс должен быть создан с использованием синтаксиса ES6 (`class`)
     * и расширять класс `Interface` напрямую или через другой подкласс.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если переданный класс расширяет `Interface`, иначе `false`.
     *
     * ### Примеры использования
     *
     * #### Интерфейс и классы
     *
     * ```js
     * class MyContract extends Interface {}
     * class AnotherClass {}
     *
     * console.log(Type.isContract(MyContract)); // true
     * console.log(Type.isContract(AnotherClass)); // false
     * ```
     *
     * #### Пример с наследованием интерфейсов
     *
     * ```js
     * class ExtendedInterface extends Interface {}
     *
     * class MyContract extends ExtendedInterface {}
     *
     * console.log(Type.isContract(MyContract)); // true
     * console.log(Type.isContract(Interface)); // false
     * ```
     *
     * ### Проверка некорректных значений
     *
     * ```js
     * console.log(Type.isContract(null)); // false
     * console.log(Type.isContract(undefined)); // false
     * console.log(Type.isContract(42)); // false
     * console.log(Type.isContract({})); // false
     * console.log(Type.isContract(function Foo() {})); // false
     * ```
     *
     * @param {any} value - Проверяемое значение.
     * @returns {boolean} Возвращает `true`, если класс является контрактом, основанным на интерфейсе `Interface`.
     */
    static isContract(value) {
        return is_contract(value);
    }

    /**
     * Проверяет, счётно ли значение переменной.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Значение для проверки.
     *
     * ### Описание
     *
     * Функция предназначена для проверки, является ли переданная переменная "счётной".
     *
     * Счётными считаются:
     *
     * 1. **Массивы** (например, `[1, 2, 3]`).
     * 2. **Ассоциативные массивы** — обычные объекты (например, `{foo: 'bar'}`).
     * 3. **Экземпляры класса**, реализующего интерфейс `Countable`.
     *
     * Это полезно при работе с функцией `count`, где необходимо убедиться, что переданное значение поддерживает подсчёт элементов.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение является счётным, иначе `false`.
     *
     * ### Примеры использования
     *
     * ```js
     * // Проверка массивов
     * Type.isCountable([1, 2, 3]); // true
     * Type.isCountable([]);        // true
     *
     * // Проверка ассоциативных массивов
     * Type.isCountable({foo: 'bar'}); // true
     * Type.isCountable({});           // true
     *
     * // Проверка объектов, реализующих интерфейс Countable
     * class Collection {
     *      static __implements = [Countable];
     *
     *      count() {
     *          return 10;
     *      }
     * }
     * const collect = new Collection();
     * Type.isCountable(collect); // true
     *
     * // Несчётные значения
     * Type.isCountable(42);        // false
     * Type.isCountable('string');  // false
     * Type.isCountable(null);      // false
     *
     * // Пользовательские классы без реализации Countable
     * class MyCollection {}
     * const myObject = new MyCollection();
     * Type.isCountable(myObject); // false
     * ```
     *
     * @param {any} value Значение для проверки.
     * @returns {boolean} Возвращает `true`, если значение является счётным, иначе `false`.
     */
    static isCountable(value) {
        return is_countable(value);
    }

    /**
     * Проверяет, является ли переданное значение числом с плавающей точкой.
     *
     * Эта функция служит синонимом для проверки чисел с плавающей точкой. Она вызывает функцию `is_float`, которая
     * проверяет, является ли значение числом с дробной частью. В JavaScript все числа с плавающей точкой представлены
     * как числа с двойной точностью (64 бита), так что на практике нет различий между функциями `is_double` и `is_float`.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Значение, которое нужно проверить на числовой тип с плавающей точкой.
     *
     * ### Описание
     *
     * Функция проверяет, является ли переданное значение числом с плавающей точкой (которое не является целым числом).
     * В случае, если число имеет дробную часть (например, 3.14), оно будет считаться числом с плавающей точкой. Если
     * число является целым, функция вернёт `false`. Для значений, которые не являются числами (например, строки, булевы
     * значения, `null` или `undefined`), также будет возвращён результат `false`.
     *
     * Эта функция полезна, когда необходимо проверить числовое значение, которое может быть представлено с дробной частью.
     *
     * ### Возвращаемое значение
     *
     * Функция возвращает:
     * - `true`, если значение является числом с плавающей точкой.
     * - `false`, если значение не является числом с плавающей точкой (например, целое число или нечисловое значение).
     *
     * ### Примеры использования
     *
     * 1. **Проверка чисел с плавающей точкой**
     *
     * ```js
     * Type.isDouble(3.14); // true
     * Type.isDouble(-0.001); // true
     * Type.isDouble(2.0); // false (2.0 является целым числом)
     * ```
     *
     * 2. **Проверка целых чисел**
     *
     * ```js
     * Type.isDouble(5); // false
     * Type.isDouble(0); // false
     * Type.isDouble(-10); // false
     * ```
     *
     * 3. **Проверка NaN**
     *
     * ```js
     * Type.isDouble(NaN); // false
     * ```
     *
     * 4. **Проверка строк и других типов**
     *
     * ```js
     * Type.isDouble('3.14'); // false
     * Type.isDouble(true); // false
     * Type.isDouble(null); // false
     * Type.isDouble(undefined); // false
     * ```
     *
     * @param {any} value Значение для проверки.
     * @returns {boolean} Возвращает `true`, если значение является числом с плавающей точкой, иначе `false`.
     */
    static isDouble(value) {
        return is_float(value);
    }

    /**
     * Проверяет, является ли значение числом с плавающей точкой.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Значение для проверки.
     *
     * ### Описание
     *
     * Функция `is_float` проверяет, является ли переданное значение числом с дробной частью, которое отличается от целого числа.
     *
     * Она работает следующим образом:
     *
     * 1. Проверяет, что значение имеет тип `number`.
     * 2. Исключает значения `NaN`, которые также относятся к типу `number`, но не считаются числовыми значениями.
     * 3. Проверяет, что у числа есть дробная часть, проверяя остаток от деления на `1` (`value % 1 !== 0`).
     *
     * Значения, которые не являются числами или числа без дробной части, не считаются числами с плавающей точкой.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение является числом с плавающей точкой, иначе `false`.
     *
     * ### Примеры использования
     *
     * #### Числа с плавающей точкой
     *
     * ```js
     * Type.isFloat(3.14);    // true
     * Type.isFloat(-0.5);    // true
     * Type.isFloat(0.1 + 0.2); // true
     * ```
     *
     * #### Целые числа
     *
     * ```js
     * Type.isFloat(0);       // false
     * Type.isFloat(42);      // false
     * Type.isFloat(-100);    // false
     * ```
     *
     * #### Нечисловые значения
     *
     * ```js
     * Type.isFloat('3.14');  // false
     * Type.isFloat(NaN);     // false
     * Type.isFloat(null);    // false
     * Type.isFloat(undefined); // false
     * Type.isFloat(true);    // false
     * Type.isFloat({});      // false
     * Type.isFloat([]);      // false
     * ```
     *
     * #### Специальные значения
     *
     * ```js
     * Type.isFloat(Infinity);   // false
     * Type.isFloat(-Infinity);  // false
     * ```
     *
     * @param {any} value Значение для проверки.
     * @returns {boolean} Возвращает `true`, если значение является числом с плавающей точкой, иначе `false`.
     */
    static isFloat(value) {
        return is_float(value);
    }

    /**
     * Проверяет, является ли значение целым числом.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Значение, которое нужно проверить.
     *
     * ### Описание
     *
     * Функция `is_int` определяет, является ли переданное значение целым числом.
     *
     * Она выполняет следующие проверки:
     *
     * 1. **Тип значения**: Убеждается, что `value` имеет тип `number`.
     * 2. **Конечность числа**: Проверяет, что значение не является `Infinity` или `NaN` с помощью `Number.isFinite(value)`.
     * 3. **Целочисленность**: Убедится, что остаток от деления числа на 1 равен нулю (`value % 1 === 0`).
     *
     * Если значение соответствует всем этим условиям, оно считается целым числом.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение является целым числом, иначе `false`.
     *
     * ### Примеры использования
     *
     * ```js
     * // Проверка целых чисел
     * Type.isInt(42);       // true
     * Type.isInt(0);        // true
     * Type.isInt(-123);     // true
     *
     * // Проверка дробных чисел
     * Type.isInt(3.14);     // false
     * Type.isInt(-0.001);   // false
     *
     * // Некорректные типы данных
     * Type.isInt('42');     // false (строка)
     * Type.isInt(true);     // false (логическое значение)
     * Type.isInt(null);     // false (null)
     * Type.isInt(undefined);// false (undefined)
     *
     * // Бесконечные и некорректные числовые значения
     * Type.isInt(Infinity); // false (бесконечность)
     * Type.isInt(-Infinity);// false (отрицательная бесконечность)
     * Type.isInt(NaN);      // false (не число)
     * ```
     *
     * @param {any} value Значение для проверки.
     * @returns {boolean} Возвращает `true`, если значение является целым числом, иначе `false`.
     */
    static isInt(value) {
        return is_int(value);
    }

    /**
     * Проверяет, является ли значение целым числом.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Проверяемая переменная.
     *
     * ### Описание
     *
     * Функция `is_int` определяет, является ли переданное значение целым числом.
     *
     * Она выполняет следующие проверки:
     *
     * 1. **Тип значения**: Убеждается, что `value` имеет тип `number`.
     * 2. **Конечность числа**: Проверяет, что значение не является `Infinity` или `NaN` с помощью `Number.isFinite(value)`.
     * 3. **Целочисленность**: Убедится, что остаток от деления числа на 1 равен нулю (`value % 1 === 0`).
     *
     * Если значение соответствует всем этим условиям, оно считается целым числом.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение является целым числом, иначе `false`.
     *
     * ### Примеры использования
     *
     * ```js
     * // Проверка целых чисел
     * Type.isInteger(42);       // true
     * Type.isInteger(0);        // true
     * Type.isInteger(-123);     // true
     *
     * // Проверка дробных чисел
     * Type.isInteger(3.14);     // false
     * Type.isInteger(-0.001);   // false
     *
     * // Некорректные типы данных
     * Type.isInteger('42');     // false (строка)
     * Type.isInteger(true);     // false (логическое значение)
     * Type.isInteger(null);     // false (null)
     * Type.isInteger(undefined);// false (undefined)
     *
     * // Бесконечные и некорректные числовые значения
     * Type.isInteger(Infinity); // false (бесконечность)
     * Type.isInteger(-Infinity);// false (отрицательная бесконечность)
     * Type.isInteger(NaN);      // false (не число)
     * ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является целым числом, иначе `false`.
     */
    static isInteger(value) {
        return is_int(value);
    }

    /**
     * Проверяет, является ли переданное значение итерируемым.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Проверяемая переменная.
     *
     * ### Описание
     *
     * Эта функция проверяет, является ли переданное значение массивом или объектом, который реализует интерфейс `Traversable`.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если переменная является итерируемым объектом (массивом или объектом, реализующим интерфейс `Traversable`). В остальных случаях функция возвращает `false`.
     *
     * ### Примеры использования
     *
     * 1. Массивы:
     *
     *    ```js
     *    Type.isIterable([1, 2, 3]); // true
     *    Type.isIterable({ foo: 'bar' }); // true
     *    Type.isIterable(array({ foo: 'bar' })); // true
     *    ```
     *
     * 2. Объекты, реализующие интерфейс `Traversable`:
     *
     *    ```js
     *    class Collection {
     *        static __implements = [Traversable];
     *    }
     *    const instance = new Collection();
     *    Type.isIterable(instance); // true
     *    ```
     *
     * 3. Неитерируемые значения:
     *
     *    ```js
     *    Type.isIterable(42); // false
     *    Type.isIterable('hello'); // false
     *    ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является итерируемым, иначе `false`.
     */
    static isIterable(value) {
        return is_iterable(value);
    }

    /**
     * Проверяет, является ли значение целым числом.
     * Функция является синонимом для `is_int`.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Проверяемая переменная.
     *
     * ### Описание
     *
     * Функция `is_long` предназначена для проверки, является ли переданное значение целым числом.
     * Она выполняет те же проверки, что и функция `is_int`:
     *
     * 1. **Тип значения**: Убеждается, что `value` имеет тип `number`.
     * 2. **Конечность числа**: Проверяет, что значение не является `Infinity` или `NaN` с помощью `Number.isFinite(value)`.
     * 3. **Целочисленность**: Убедится, что остаток от деления числа на 1 равен нулю (`value % 1 === 0`).
     *
     * Если значение соответствует всем этим условиям, оно считается целым числом.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение является целым числом, иначе `false`.
     *
     * ### Примеры использования
     *
     * ```js
     * // Проверка целых чисел
     * Type.isLong(42);       // true
     * Type.isLong(0);        // true
     * Type.isLong(-123);     // true
     *
     * // Проверка дробных чисел
     * Type.isLong(3.14);     // false
     * Type.isLong(-0.001);   // false
     *
     * // Некорректные типы данных
     * Type.isLong('42');     // false (строка)
     * Type.isLong(true);     // false (логическое значение)
     * Type.isLong(null);     // false (null)
     * Type.isLong(undefined);// false (undefined)
     *
     * // Бесконечные и некорректные числовые значения
     * Type.isLong(Infinity); // false (бесконечность)
     * Type.isLong(-Infinity);// false (отрицательная бесконечность)
     * Type.isLong(NaN);      // false (не число)
     * ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является целым числом, иначе `false`.
     */
    static isLong(value) {
        return is_int(value);
    }

    /**
     * Проверяет, является ли значение `null`.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Проверяемая переменная.
     *
     * ### Описание
     *
     * Функция `is_null` предназначена для проверки, является ли переданное значение `null`.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение является `null`, иначе `false`.
     *
     * ### Примеры использования
     *
     * ```js
     * // Пример 1: Проверка значения `null`
     * Type.isNull(null); // true
     *
     * // Пример 2: Проверка значений, не являющихся `null`
     * Type.isNull(undefined); // false
     * Type.isNull(0); // false
     * Type.isNull(''); // false
     * Type.isNull(false); // false
     * Type.isNull({}); // false
     * Type.isNull([]); // false
     * ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является `null`, иначе `false`.
     */
    static isNull(value) {
        return is_null(value);
    }

    /**
     * Проверяет, является ли значение числом.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Проверяемая переменная.
     *
     * ### Описание
     *
     * Функция `is_number` предназначена для проверки, является ли переданное значение числом.
     *
     * Она проверяет:
     *
     * 1. **Тип значения**: Убеждается, что `value` имеет тип `number`.
     * 2. **Конечность числа**: Проверяет, что значение не является `Infinity` или `NaN` с помощью `Number.isFinite(value)`.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение является числом, иначе `false`.
     *
     * ### Примеры использования
     *
     * ```js
     * // Пример 1: Проверка числовых значений
     * Type.isNumber(42); // true
     * Type.isNumber(3.14); // true
     * Type.isNumber(-0.99); // true
     *
     * // Пример 2: Проверка специальных числовых значений
     * Type.isNumber(NaN); // false
     * Type.isNumber(Infinity); // false
     * Type.isNumber(-Infinity); // false
     *
     * // Пример 3: Проверка значений других типов
     * Type.isNumber('42'); // false (строка)
     * Type.isNumber(true); // false (логическое значение)
     * Type.isNumber(null); // false
     * Type.isNumber(undefined); // false
     * Type.isNumber({}); // false (объект)
     * Type.isNumber([]); // false (массив)
     * ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является числом, иначе `false`.
     */
    static isNumber(value) {
        return is_number(value);
    }

    /**
     * Проверяет, является ли значение числом или числовой строкой.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Проверяемая переменная.
     *
     * ### Описание
     *
     * Функция `is_numeric` предназначена для проверки, является ли переданное значение числом или числовой строкой.
     *
     * Она проверяет:
     *
     * 1. **Тип значения**: Убеждается, что `value` имеет тип `number` или `string`.
     * 2. **Конечность числа**: Проверяет, что значение не является `Infinity` или `NaN` с помощью `Number.isFinite(value)`.
     * 3. **Числовая строка**: Проверяет, что строка может быть преобразована в конечное число.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение является числом или числовой строкой, иначе `false`.
     *
     * ### Примеры использования
     *
     * ```js
     * // Пример 1: Проверка числовых значений
     * Type.isNumeric(42); // true
     * Type.isNumeric(3.14); // true
     * Type.isNumeric(-0.99); // true
     *
     * // Пример 2: Проверка числовых строк
     * Type.isNumeric('42'); // true
     * Type.isNumeric('3.14'); // true
     * Type.isNumeric('-0.99'); // true
     *
     * // Пример 3: Проверка специальных числовых значений
     * Type.isNumeric(NaN); // false
     * Type.isNumeric(Infinity); // false
     * Type.isNumeric(-Infinity); // false
     *
     * // Пример 4: Проверка значений других типов
     * Type.isNumeric(true); // false (логическое значение)
     * Type.isNumeric(null); // false
     * Type.isNumeric(undefined); // false
     * Type.isNumeric({}); // false (объект)
     * Type.isNumeric([]); // false (массив)
     * ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является числом или числовой строкой, иначе `false`.
     */
    static isNumeric(value) {
        return is_numeric(value);
    }

    /**
     * Проверяет, является ли переданное значение объектом, созданным с использованием класса.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Проверяемая переменная.
     *
     * ### Описание
     *
     * В JavaScript объекты могут быть созданы как с использованием классов, так и с помощью функций-конструкторов
     * или простых объектов. Для определения, является ли значение объектом, созданным с использованием класса,
     * функция выполняет несколько проверок:
     *
     * 1. Проверка, что значение является объектом (с использованием `instanceof Object`).
     * 2. Проверка, что у объекта есть конструктор, и что его строковое представление начинается с 'class',
     *    что характерно для объектов, созданных с использованием классов.
     *
     * Это позволяет корректно отличить обычные объекты, массивы, примитивы и классовые объекты.
     *
     * #### Примечание
     *
     * - Если объект был создан с помощью `class`, то его конструктор будет иметь строковое представление, начинающееся с "class".
     * - Массивы и обычные объекты, созданные с использованием `Object` или функции-конструктора, будут исключены.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение является объектом, созданным с использованием класса, иначе возвращает `false`.
     *
     * ### Примеры использования
     *
     * 1. Обычные объекты:
     *
     * ```js
     * Type.isObject({}); // false - это обычный объект, не созданный с помощью класса
     * ```
     *
     * 2. Массивы:
     *
     * ```js
     * Type.isObject([]); // false - это массив, а не объект, созданный с использованием класса
     * ```
     *
     * 3. Объект, созданный с использованием `Date`:
     *
     * ```js
     * Type.isObject(new Date()); // false - объект Date, не являющийся классом, а встроенным объектом
     * ```
     *
     * 4. Классы:
     *
     * ```js
     * class MyClass {}
     * Type.isObject(new MyClass()); // true - это объект, созданный с использованием класса
     * ```
     *
     * 5. Примитивы и другие объекты:
     *
     * ```js
     * Type.isObject(null); // false - это не объект
     * Type.isObject(42); // false - это не объект
     * Type.isObject(new Map()); // false - объект Map, но не класс
     * ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является объектом, созданным с использованием класса, иначе `false`.
     */
    static isObject(value) {
        return is_object(value);
    }

    /**
     * Проверяет, является ли значение скалярным.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Проверяемая переменная.
     *
     * ### Описание
     *
     * Скалярные переменные — это переменные, содержащие `int`, `float`, `string`, `bool` и `symbol`.
     * Типы `array`, `object`, `null`, `undefined` — не скалярные.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение является скалярным, иначе `false`.
     *
     * ### Примеры использования
     *
     * ```js
     * // Пример 1: Проверка скалярных значений
     * Type.isScalar(true); // true
     * Type.isScalar(42); // true
     * Type.isScalar('hello'); // true
     * Type.isScalar(Symbol('symbol')); // true
     *
     * // Пример 2: Проверка не скалярных значений
     * Type.isScalar(null); // false
     * Type.isScalar(undefined); // false
     * Type.isScalar({}); // false (объект)
     * Type.isScalar([]); // false (массив)
     * Type.isScalar(() => {}); // false (функция)
     * ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является скалярным, иначе `false`.
     */
    static isScalar(value) {
        return is_scalar(value);
    }

    /**
     * Проверяет, является ли значение строкой.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Проверяемая переменная.
     *
     * ### Описание
     *
     * Функция `is_string` предназначена для проверки, является ли переданное значение строкой.
     *
     * Она проверяет:
     *
     * 1. Что значение имеет тип `string`.
     *
     * Функция возвращает `false` для всех значений, не принадлежащих типу `string`.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение является строкой, иначе `false`.
     *
     * ### Примеры использования
     *
     * ```js
     * // Пример 1: Проверка строковых значений
     * Type.isString('hello'); // true
     * Type.isString(''); // true
     * Type.isString(`template string`); // true
     *
     * // Пример 2: Проверка значений других типов
     * Type.isString(42); // false (число)
     * Type.isString(true); // false (логическое значение)
     * Type.isString(null); // false
     * Type.isString(undefined); // false
     * Type.isString({}); // false (объект)
     * Type.isString([]); // false (массив)
     * Type.isString(() => {}); // false (функция)
     * ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является строкой, иначе `false`.
     */
    static isString(value) {
        return is_string(value);
    }

    /**
     * Проверяет, является ли значение символом.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Проверяемая переменная.
     *
     * ### Описание
     *
     * Функция `is_symbol` предназначена для проверки, является ли переданное значение символом.
     *
     * Она проверяет:
     *
     * 1. Что значение имеет тип `symbol`.
     *
     * Функция возвращает `false` для всех значений, не принадлежащих типу `symbol`.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение является символом, иначе `false`.
     *
     * ### Примеры использования
     *
     * ```js
     * // Пример 1: Проверка символов
     * Type.isSymbol(Symbol('symbol')); // true
     * Type.isSymbol(Symbol.iterator); // true
     *
     * // Пример 2: Проверка значений других типов
     * Type.isSymbol('hello'); // false (строка)
     * Type.isSymbol(42); // false (число)
     * Type.isSymbol(true); // false (логическое значение)
     * Type.isSymbol(null); // false
     * Type.isSymbol(undefined); // false
     * Type.isSymbol({}); // false (объект)
     * Type.isSymbol([]); // false (массив)
     * Type.isSymbol(() => {}); // false (функция)
     * ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является символом, иначе `false`.
     */
    static isSymbol(value) {
        return is_symbol(value);
    }

    /**
     * Проверяет, является ли значение `undefined`.
     *
     * ### Параметры
     *
     * - `value` (any)
     *      Проверяемая переменная.
     *
     * ### Описание
     *
     * Функция `is_undefined` предназначена для проверки, является ли переданное значение `undefined`.
     *
     * Она проверяет:
     *
     * 1. Что значение имеет тип `undefined`.
     *
     * Функция возвращает `false` для всех значений, не принадлежащих типу `undefined`.
     *
     * ### Возвращаемое значение
     *
     * Возвращает `true`, если значение является `undefined`, иначе `false`.
     *
     * ### Примеры использования
     *
     * ```js
     * // Пример 1: Проверка значения `undefined`
     * Type.isUndefined(undefined); // true
     *
     * // Пример 2: Проверка значений других типов
     * Type.isUndefined('hello'); // false (строка)
     * Type.isUndefined(42); // false (число)
     * Type.isUndefined(true); // false (логическое значение)
     * Type.isUndefined(null); // false
     * Type.isUndefined({}); // false (объект)
     * Type.isUndefined([]); // false (массив)
     * Type.isUndefined(() => {}); // false (функция)
     * ```
     *
     * @param {any} value Проверяемая переменная.
     * @returns {boolean} Возвращает `true`, если значение является `undefined`, иначе `false`.
     */
    static isUndefined(value) {
        return is_undefined(value);
    }
}

export default Type;
